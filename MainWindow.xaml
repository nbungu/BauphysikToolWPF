<Window x:Class="BauphysikToolWPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:BauphysikToolWPF"
        xmlns:ui="clr-namespace:BauphysikToolWPF.UI"
        xmlns:vm="clr-namespace:BauphysikToolWPF.UI.ViewModels"
        xmlns:controls="clr-namespace:BauphysikToolWPF.UI.CustomControls"
        xmlns:system="clr-namespace:System;assembly=System.Runtime"
        d:DataContext="{d:DesignInstance vm:MainWindow_VM}"
        mc:Ignorable="d"
        Title="{Binding Title}"
        Height="700"
        Width="1200"
        Background="{StaticResource PrimaryLightBrush}"
        WindowStartupLocation="CenterScreen"
        Closing="MainWindow_OnClosing"
        Loaded="MainWindow_OnLoaded"
        StateChanged="MainWindow_StateChanged"
        TextOptions.TextFormattingMode="Display"
        WindowStyle="None">

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="32" ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" />
    </WindowChrome.WindowChrome>

    <!--
    Additionally added: d:DataContext="{d:DesignInstance vm:MainWindow_VM}"
    to the xaml constructor to be able to acces Named Elements in code behind
    -->
    <Window.DataContext>
        <vm:MainWindow_VM/>
    </Window.DataContext>

    <!-- https://www.codeproject.com/Articles/5275552/WPF-Compact-Navigation-Menu -->
    <Window.Resources>
        
        <!-- Checks if an ListBoxItem from ItemsSource is a Header or not-->
        <controls:IsHeaderConverter x:Key="IsHeaderConverter"/>

        <!--The actual content pages: Used in MainWindow.xaml ContentControl to set the current page-->
        <DataTemplate x:Key="FO0_ProjectPage">
            <ui:FO0_ProjectPage/>
        </DataTemplate>
        <DataTemplate x:Key="FO0_LandingPage">
            <ui:FO0_ElementsPage/>
        </DataTemplate>
        <DataTemplate x:Key="FO1_SetupLayer">
            <ui:FO1_SetupLayer/>
        </DataTemplate>
        <DataTemplate x:Key="FO1_SetupEnv">
            <ui:FO1_SetupEnv/>
        </DataTemplate>
        <DataTemplate x:Key="FO2_Temperature">
            <ui:FO2_Temperature/>
        </DataTemplate>
        <DataTemplate x:Key="FO3_Moisture">
            <ui:FO3_Moisture/>
        </DataTemplate>
        <DataTemplate x:Key="FO4_Dynamic">
            <ui:FO4_Dynamic/>
        </DataTemplate>

        <!--Content Pages on right side-->
        <Style x:Key="NavigationContentStyle" TargetType="ContentControl">
            <!--Default First Page-->
            <Setter Property="ContentTemplate" Value="{StaticResource FO0_ProjectPage}"/>
            <!--
            Switch between Pages based on 'SelectedItem' of 'NavigationMenuListBox'
            Item value comes from 'ItemsSource' (type of ListBoxItem), or via 'Tag'
            -->
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=ProjectBoxHeader, Path=Tag}" Value="ProjectPage">
                    <Setter Property="ContentTemplate" Value="{StaticResource FO0_ProjectPage}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=ProjectBoxHeader, Path=Tag}" Value="LandingPage">
                    <Setter Property="ContentTemplate" Value="{StaticResource FO0_LandingPage}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedItem}" Value="SetupLayer">
                    <Setter Property="ContentTemplate" Value="{StaticResource FO1_SetupLayer}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedItem}" Value="SetupEnv">
                    <Setter Property="ContentTemplate" Value="{StaticResource FO1_SetupEnv}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedItem}" Value="Temperature">
                    <Setter Property="ContentTemplate" Value="{StaticResource FO2_Temperature}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedItem}" Value="Moisture">
                    <Setter Property="ContentTemplate" Value="{StaticResource FO3_Moisture}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedItem}" Value="Dynamic">
                    <Setter Property="ContentTemplate" Value="{StaticResource FO4_Dynamic}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--
        NavigationMenu ListBoxItem values: Used in NavigationMenuListBox as ItemsSource
        Used as Binding Values within the NavigationMenu to toggle between the pages
        and set corresponding style of the ListBoxItem
        -->
        <x:Array x:Key="NavigationMenuItems" Type="system:String">
            <system:String>Header1</system:String>
            <system:String>SetupLayer</system:String>  <!--SelectedIndex: 1-->
            <system:String>SetupEnv</system:String>    <!--SelectedIndex: 2-->
            <system:String>Header2</system:String>
            <system:String>Temperature</system:String> <!--SelectedIndex: 4-->
            <system:String>Moisture</system:String>    <!--SelectedIndex: 5-->
            <system:String>Dynamic</system:String>    <!--SelectedIndex: 6-->
        </x:Array>

        <!--NavigationMenu ListBox appearance: Used in ListBox as Style -->
        <Style x:Key="NavigationMenuListBoxStyle" TargetType="{x:Type ListBox}">
            <Setter Property="Background" Value="{StaticResource PrimaryDarkBrush}"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Visibility" Value="Visible"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <!-- Nothing selected by default -->
            <Setter Property="SelectedIndex" Value="-1"/>
            <Setter Property="Padding" Value="8"/>
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBox}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="0" Padding="0" SnapsToDevicePixels="true">
                            <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="false">
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--Don't show ListBox when on the LandingPage and the first Header entry (acts like ListBoxItem) -->
            <!--<Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedItem}" Value="Header1">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedItem}" Value="LandingPage">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>-->
        </Style>

        <!--NavigationMenu ListBox entry appearance and behaviour: Used in ListBox as ItemContainerStyle-->
        <Style x:Key="NavigationMenuItemStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource PrimaryLightBrush}"/>
            <Setter Property="Margin" Value="0,0,0,8"/>
            <Setter Property="ToolTip" Value="{Binding}"/>
            <Setter Property="Visibility" Value="Visible"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <!--Triggers & Effects-->
            <Style.Triggers>
                <!--When a ListBox entry is NOT a Header, apply this Template-->
                <DataTrigger Binding="{Binding Converter={StaticResource IsHeaderConverter}}" Value="False">
                    <!-- Template for the Button-like entries-->
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border x:Name="listBox_Border"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    Background="{TemplateBinding Background}"
                                    Padding="{TemplateBinding Padding}"
                                    CornerRadius="8"
                                    SnapsToDevicePixels="true">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Border>
                                <!-- Triggers ONLY usable in this Template -->
                                <ControlTemplate.Triggers>
                                    <!--When a ListBox entry is Selected-->
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="listBox_Border" Property="Background" Value="{StaticResource PrimaryDarkHighlightBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{StaticResource PrimaryHighlightBrush}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <!--When a ListBox entry IS a Header, apply this Template-->
                <DataTrigger Binding="{Binding Converter={StaticResource IsHeaderConverter}}" Value="True">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="IsTabStop" Value="False"/>
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=NavigationMenuListBox, Path=SelectedIndex}" Value="-1">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--
        ListBox entry content: Used in ListBox as ItemTemplate
        The Content Located inside of 'NavigationMenuItemStyle'
        -->
        <DataTemplate x:Key="NavigationMenuItemTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Image x:Name="MenuItemIcon" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="4" MaxWidth="24"/>
                <Label x:Name="MenuItemLabel" Grid.Column="1" HorizontalContentAlignment="Center" Foreground="White" FontSize="14" Margin="0,4,4,4"/>
            </Grid>
            <!--
            Binding is ItemsSource from 'NavigationMenuListBox'
            Changes the Icon and Text of the entry based on the ItemsSource Values
            -->
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding}" Value="Header1">
                    <Setter TargetName="MenuItemLabel" Property="Content" Value="BAUTEIL ERSTELLEN"/>
                    <Setter TargetName="MenuItemLabel" Property="Foreground" Value="{StaticResource PrimaryMediumBrush}"/>
                    <Setter TargetName="MenuItemLabel" Property="FontWeight" Value="Bold"/>
                    <Setter TargetName="MenuItemLabel" Property="FontSize" Value="12"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding}" Value="SetupLayer">
                    <Setter TargetName="MenuItemIcon" Property="Source" Value="{StaticResource ButtonIcon_Layer_W}"/>
                    <Setter TargetName="MenuItemLabel" Property="Content" Value="Schichtaufbau"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding}" Value="SetupEnv">
                    <Setter TargetName="MenuItemIcon" Property="Source" Value="{StaticResource ButtonIcon_EnvVar_W}"/>
                    <Setter TargetName="MenuItemLabel" Property="Content" Value="Umgebung"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding}" Value="Header2">
                    <Setter TargetName="MenuItemLabel" Property="Content" Value="ERGEBNISSE"/>
                    <Setter TargetName="MenuItemLabel" Property="Foreground" Value="{StaticResource PrimaryMediumBrush}"/>
                    <Setter TargetName="MenuItemLabel" Property="FontWeight" Value="Bold"/>
                    <Setter TargetName="MenuItemLabel" Property="FontSize" Value="12"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding}" Value="Temperature">
                    <Setter TargetName="MenuItemIcon" Property="Source" Value="{StaticResource ButtonIcon_Temperature_W}"/>
                    <Setter TargetName="MenuItemLabel" Property="Content" Value="Temperaturkurve"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding}" Value="Moisture">
                    <Setter TargetName="MenuItemIcon" Property="Source" Value="{StaticResource ButtonIcon_Moisture_W}"/>
                    <Setter TargetName="MenuItemLabel" Property="Content" Value="Glaser-Diagramm"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding}" Value="Dynamic">
                    <Setter TargetName="MenuItemIcon" Property="Source" Value="{StaticResource ButtonIcon_Moisture_W}"/>
                    <Setter TargetName="MenuItemLabel" Property="Content" Value="Dynamic"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <Style x:Key="WindowMainPanelStyle" TargetType="{x:Type Border}">
            <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrush}" />
            <Setter Property="BorderThickness" Value="1" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                    <Setter Property="BorderThickness" Value="0" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TitleBarButtonStyle" TargetType="Button">
            <Setter Property="Foreground" Value="{DynamicResource WindowTextBrush}" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border
                            x:Name="border"
                            Background="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true">
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Focusable="False"
                                RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PrimaryMediumBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PrimaryHoverBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="TitleBarCloseButtonStyle" TargetType="Button">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border
                            x:Name="border"
                            Background="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true">
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Focusable="False"
                                RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PrimaryMediumBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource MouseOverWindowCloseButtonForegroundBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{StaticResource PrimaryHighlightBrush}" />
                                <Setter Property="Foreground" Value="{DynamicResource MouseOverWindowCloseButtonForegroundBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Custom Toolbar Button: Text Only -->
        <Style x:Key="TitleBarButtonStyle_B" TargetType="{x:Type Button}">
            <!--Set default properties of the button-->
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Content" Value="Title"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="MinWidth" Value="20"/>
            <Setter Property="MinHeight" Value="20"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
            <!--Set appearance of the element-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <!--Element appearance with behaviour of a 'Button'-->
                        <Border CornerRadius="0" Background="{TemplateBinding Background}">
                            <StackPanel Orientation="Horizontal">
                                <Label Content="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}" FontSize="12" Margin="4,0,4,0"/>
                            </StackPanel>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--Set Triggers and Effects-->
            <Style.Triggers>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource PrimaryBorderBrush}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource PrimaryHoverBrush}"/>
                    <Setter Property="BorderThickness" Value="4"/>
                    <Setter Property="BorderBrush" Value="{StaticResource PrimaryDarkBrush}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>

    <Window.InputBindings>
        <KeyBinding
            Key="O"
            Command="{Binding OpenFile}"
            Modifiers="Control" />
        <KeyBinding
            Key="F"
            Command="{Binding OpenFolder}"
            Modifiers="Control" />
        <KeyBinding
            Key="Q"
            Command="{Binding ProcessingService.AddToQueue}"
            Modifiers="Control" />
        <KeyBinding
            Key="O"
            Command="{Binding ProcessingService.QueueFiles}"
            Modifiers="Control+Shift" />
        <KeyBinding
            Key="T"
            Command="{Binding ProcessingService.QueueTitlesAction}"
            Modifiers="Control" />
        <KeyBinding
            Key="W"
            Command="{Binding CloseVideoSource}"
            Modifiers="Control" />
        <KeyBinding
            Key="D"
            Command="{Binding OutputPathService.PickOutputPath}"
            Modifiers="Control" />
    </Window.InputBindings>

    <Border Name="RootGrid" Style="{StaticResource WindowMainPanelStyle}">
        
        <Grid Name="ContentGrid">

            <Grid.RowDefinitions>
                <!--  Title bar  -->
                <RowDefinition Height="30" />

                <!-- Main Grid for Content -->
                <RowDefinition Height="*" />

            </Grid.RowDefinitions>
            
            <!-- Title bar -->
            <Grid Background="{StaticResource PrimaryLightBrush}" VerticalAlignment="Top">
                
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Left">
                        <Image Source="{StaticResource ButtonIcon_Accepted_B}" Stretch="Fill" MinWidth="16" MinHeight="16" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,4,8,4"/>
                    <Button Content="Datei" Style="{StaticResource TitleBarButtonStyle_B}"/>
                    <Button Content="Einstellungen" Style="{StaticResource TitleBarButtonStyle_B}"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button Click="MinimizeCommand" RenderOptions.EdgeMode="Aliased" Style="{StaticResource TitleBarButtonStyle}">
                            <Path
                                Width="46"
                                Height="32"
                                Data="M 18,15 H 28"
                                Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                StrokeThickness="1" />
                        </Button>
                        <Button Name="MaximizeButton" Click="MaximizeCommand" Style="{StaticResource TitleBarButtonStyle}">
                            <Path
                                Width="46"
                                Height="32"
                                Data="M 18.5,10.5 H 27.5 V 19.5 H 18.5 Z"
                                Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                StrokeThickness="1" />
                        </Button>
                        <Button Name="RestoreButton" Click="MaximizeCommand" Style="{StaticResource TitleBarButtonStyle}">
                            <Path
                                Width="46"
                                Height="32"
                                Data="M 18.5,12.5 H 25.5 V 19.5 H 18.5 Z M 20.5,12.5 V 10.5 H 27.5 V 17.5 H 25.5"
                                Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                StrokeThickness="1" />
                        </Button>
                        <Button Name="CloseButton" Click="CloseCommand" Style="{StaticResource TitleBarCloseButtonStyle}">
                            <Path
                                Width="46"
                                Height="32"
                                Data="M 18,11 27,20 M 18,20 27,11"
                                Stroke="{Binding Path=Foreground,
						                 RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                StrokeThickness="1" />
                        </Button>
                    </StackPanel>
            </Grid>

            <!-- Main Grid for Content -->
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Left Selection Box Top-->
                <Border x:Name="ProjectBoxHeader" Grid.Column="1" Grid.Row="0" Background="{StaticResource PrimaryDarkHighlightBrush}" BorderThickness="0">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" MaxHeight="120"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <StackPanel Orientation="Vertical" Margin="16,16,16,0">
                            <Label Content="Projekt:" Foreground="White" Margin="-4"/>
                            <TextBlock Text="{Binding CurrentProject.Name}" MaxWidth="152" FontWeight="Bold" Foreground="White" HorizontalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" FontSize="14"/>
                        </StackPanel>
                        <Button Grid.Row="1" Content="Projektdaten" Style="{StaticResource ButtonStyle03_B}" Tag="{StaticResource ButtonIcon_Project_B}" Command="{Binding SwitchPageCommand}" CommandParameter="{x:Static local:NavigationContent.ProjectPage}" Margin="16"/>
                        <Button Grid.Row="2" Content="Bauteilkatalog" Style="{StaticResource ButtonStyle03_B}" Tag="{StaticResource ButtonIcon_Elements_B}" Command="{Binding SwitchPageCommand}" CommandParameter="{x:Static local:NavigationContent.LandingPage}" Margin="16,0,16,16"/>
                    </Grid>
                </Border>

                <!--Left Selection Box Bottom-->
                <ListBox x:Name="NavigationMenuListBox"
                         Grid.Column="1"
                         Grid.Row="1"                 
                         Style="{StaticResource NavigationMenuListBoxStyle}"
                         ItemsSource="{StaticResource NavigationMenuItems}"
                         ItemContainerStyle="{DynamicResource NavigationMenuItemStyle}"
                         ItemTemplate="{DynamicResource NavigationMenuItemTemplate}"/>

                <!--The Actual Pages shown here-->
                <ContentControl x:Name="MainWindowContent" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Style="{StaticResource NavigationContentStyle}"/>
            </Grid>


        </Grid>

    </Border>

</Window>
