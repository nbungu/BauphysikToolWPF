<UserControl x:Class="BauphysikToolWPF.UI.FO0_LandingPage"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:BauphysikToolWPF.UI"
             xmlns:vm="clr-namespace:BauphysikToolWPF.UI.ViewModels"
             mc:Ignorable="d" 
             d:DesignHeight="700" d:DesignWidth="1200">

    <UserControl.DataContext>
        <!-- Sets the Data Reference (Source) for 'Binding' in this XAML -->
        <vm:FO0_ViewModel/> 
    </UserControl.DataContext>

    <UserControl.Resources>

        <!--Custom ButtonGridPanel: light rounded corners, click effects-->
        <Style x:Key="ButtonStyleGridPanel" TargetType="{x:Type Button}">
            <Setter Property="Content" Value="{Binding ElementId}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="{StaticResource PrimaryDarkBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <!--Element appearance with behaviour of a 'Button'-->
                        <Border x:Name="btn_border" CornerRadius="16" Background="{TemplateBinding Background}">
                            <Grid Margin="8">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height=".2*"/>
                                    <RowDefinition Height=".8*"/>
                                </Grid.RowDefinitions>
                                <Label Grid.Row="0" Content="{TemplateBinding Content}" ContentStringFormat='ID: {0}' HorizontalAlignment="Right" Foreground="White" FontSize="10"/>
                                <Image Grid.Row="1" ClipToBounds="True" SnapsToDevicePixels="True" Source="{Binding ElementImage}" Margin="8"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>            
            <Setter Property="RenderTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="1" ScaleY="1" />
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <ScaleTransform ScaleX=".96" ScaleY=".96" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource PrimaryHoverBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--Here: Binding (DataContext) is typeof 'Element' set by ItemsSource Property-->
        <DataTemplate x:Key="WrapPanelItem_DesignTemplate">
            <Grid Margin="8">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <!--
                'SelectElementCommand' is not in DataContext of this UIElement (Binding here is typeof 'Element' from ItemsSource Property).
                Switch to correct DataContext. Using the 'Tag' Property as holder of our other DataContext. Tag is set by the ItemsControl.
                -->
                <Button Grid.Row="0"
                        Content="{Binding ElementId}"
                        Command="{Binding RelativeSource={RelativeSource Self}, Path=Tag.SelectElementCommand}"
                        CommandParameter="{Binding ElementId}"
                        Style="{StaticResource ButtonStyleGridPanel}"
                        Tag="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}">
                    <Button.ContextMenu>
                        <!--
                        ContextMenu isn't a part of the visual tree of this page -> DataContext is not available.
                        You need to pass the data context in a different way, using PlacementTarget and the Tag property to expose the DataBinding (FO0_ViewModel).
                        The Tag Property can be used to hold any kind of user specified Data.
                        -->
                        <ContextMenu x:Name="WrapPanel_ContextMenu">
                            <MenuItem Header="Bearbeiten" Command="{Binding Path=PlacementTarget.Tag.OpenNewElementWindowCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.Content, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource ButtonIcon_Edit_B}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Löschen" Command="{Binding Path=PlacementTarget.Tag.DeleteElementCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.Content, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource ButtonIcon_Delete_B}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Sperren">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource ButtonIcon_Lock_B}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <Label Grid.Row="1" Content="{Binding Name}" FontSize="14" HorizontalAlignment="Center" Margin="0,4,0,0"/>
            </Grid>
        </DataTemplate>

        <ItemsPanelTemplate x:Key="WrapPanel_Template">
            <WrapPanel x:Name="element_WrapPanel" ItemWidth="144" ItemHeight="192" ClipToBounds="True"/>
        </ItemsPanelTemplate>

        <!--Custom RadioButton01_A: ToggleButton with behaviour like RadioButton: Exclusive Group, Checkstates etc.-->
        <Style x:Key="RadioButton01_A" TargetType="{x:Type RadioButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <!--Use ToggleButton as UI Element and redirect every propery needed from Parent Element (RadioButton) to the ToggleButton -->
                        <ToggleButton Style="{DynamicResource ToggleButton01_A}"
                                      IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}"
                                      Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Command, RelativeSource={RelativeSource TemplatedParent}}"
                                      CommandParameter="{Binding CommandParameter, RelativeSource={RelativeSource TemplatedParent}}"
                                      Tag="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Custom ToggleButton01_A: with icon center top, rounded corners, transparent, click effects-->
        <Style x:Key="ToggleButton01_A" TargetType="{x:Type ToggleButton}">
            <!--Set default properties of the button-->
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryBorderBrush}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="MinHeight" Value="40"/>
            <Setter Property="MinWidth" Value="56"/>
            <!--Set appearance of the element-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <!--Element appearance with behaviour of a 'Button'-->
                        <Border x:Name="btn_border" CornerRadius="16" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="4">
                            <StackPanel Orientation="Vertical">
                                <!--Bind Image via DataContext Property in the Button Element-->
                                <Image Source="{TemplateBinding Tag}" Stretch="Fill" Width="40" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="16"/>
                                <Label Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" HorizontalContentAlignment="Center" FontSize="14"/>
                            </StackPanel>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--Set Triggers and Effects-->
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource PrimaryHighlightBrush}"/>
                    <Setter Property="BorderThickness" Value="2"/>
                    <Setter Property="Background" Value="{StaticResource PrimaryHoverBrush}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource PrimaryHoverBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </UserControl.Resources>

    <Grid Background="{StaticResource PrimaryLightBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="56" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width=".2*" MinWidth="170" MaxWidth="290"/>
            <ColumnDefinition Width=".8*" MinWidth="320"/>
        </Grid.ColumnDefinitions>

        <Rectangle Grid.ColumnSpan="2" Fill="{StaticResource PrimaryDarkBrush}"/>
        <Label Grid.ColumnSpan="2" Content="Bauteilkatalog" FontSize="24" FontWeight="Bold" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Foreground="White"/>
        <Image Grid.Column="1" Grid.RowSpan="2" Width="80" Height="80" Source="../Ordner_Icon.ico" Margin="16" HorizontalAlignment="Right" VerticalAlignment="Top"/>
        
        <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Vertical" Margin="16">
            <Button Content="Bauteil erstellen" Command="{Binding OpenNewElementWindowCommand}" Style="{StaticResource ButtonStyle02_A}" Margin="0,0,0,16"/>
            <Button Content="Öffnen" Style="{StaticResource ButtonStyle02_B}" Margin="0,0,0,16"/>
            <Line X2="300" Stroke="Gray" HorizontalAlignment="Center"/>
        </StackPanel>
        <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Vertical" Margin="16" VerticalAlignment="Bottom">
            <Button x:Name="closeApp_Button" Content="Schließen" Style="{StaticResource ButtonStyle02_B}" Command="{Binding CloseCommand}"/>
        </StackPanel>

        <Grid Grid.Row="1" Grid.Column="1" Margin="16">
            <Grid.RowDefinitions>
                <RowDefinition Height="48" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width=".15*"/>
                <ColumnDefinition Width=".7*"/>
                <ColumnDefinition Width=".15*"/>
                <ColumnDefinition MinWidth="170" MaxWidth="290"/>
            </Grid.ColumnDefinitions>

            <Label Grid.Row="0" Grid.Column="1" Content="Zuletzt erstellte Bauteile" FontSize="14" FontWeight="Bold"/>

            <!--"WrapPanel inside a ListBox does pick up the DataTemplate you define .. so you have complete liberty to bind any list to your WrapPanel"-->
            <ItemsControl x:Name="element_ItemsControl"
                          Grid.Row="1"
                          Grid.Column="1"
                          ItemsSource="{Binding Elements}"
                          ItemsPanel="{StaticResource WrapPanel_Template}"
                          ItemTemplate="{StaticResource WrapPanelItem_DesignTemplate}"
                          Background="Transparent"                          
                          BorderThickness="0"
                          Tag="{Binding}"/>

            <Label Grid.Row="0" Grid.Column="3" Content="Projektdaten" FontSize="14" FontWeight="Bold"/>
            <Grid Grid.Row="1" Grid.Column="3">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width=".5*" MinWidth="64"/>
                    <ColumnDefinition Width=".5*" MinWidth="64"/>
                </Grid.ColumnDefinitions>

                <Label Grid.ColumnSpan="2" Content="Projektname:" FontSize="14"/>
                <TextBox Grid.Row="1" Grid.ColumnSpan="2" x:Name="projectName_TextBox" Text="{Binding ProjectName}" HorizontalContentAlignment="Left" FontSize="14" Height="32" Margin="0,4,0,0"/>

                <Label Grid.Row="2" Grid.ColumnSpan="2" Content="Bearbeiter:" FontSize="14" Margin="0,8,0,0"/>
                <TextBox Grid.Row="3" Grid.ColumnSpan="2" x:Name="projectUser_TextBox" Text="{Binding ProjectUserName}" HorizontalContentAlignment="Left" FontSize="14" Height="32" Margin="0,4,0,0"/>

                <Label Grid.Row="4" Grid.ColumnSpan="2" Content="Nutzungsart des Gebäudes:" FontSize="14" Margin="0,8,0,0"/>
                <RadioButton Grid.Row="5" Grid.Column="0" IsChecked="{Binding IsBuildingUsage1}" Command="{Binding ChangeBuildingStatsCommand}" CommandParameter="BuildingUsage1" GroupName="BuildingUsage" Content="Wohngebäude" Style="{StaticResource RadioButton01_A}" Tag="{StaticResource ButtonIcon_House_B}" Margin="0,4,4,0"/>
                <RadioButton Grid.Row="5" Grid.Column="1" IsChecked="{Binding IsBuildingUsage0}" Command="{Binding ChangeBuildingStatsCommand}" CommandParameter="BuildingUsage0" GroupName="BuildingUsage" Content="Nichtwohngebäude" Style="{StaticResource RadioButton01_A}" Tag="{StaticResource ButtonIcon_Office_B}" Margin="4,4,0,0"/>

                <Label Grid.Row="6" Grid.ColumnSpan="2" Content="Alter des Gebäudes:" FontSize="14" Margin="0,8,0,0"/>
                <RadioButton Grid.Row="7" Grid.Column="0" IsChecked="{Binding IsBuildingAge1}" Command="{Binding ChangeBuildingStatsCommand}" CommandParameter="BuildingAge1" GroupName="BuildingAge" Content="Neubau" Style="{StaticResource RadioButton01_A}" Tag="{StaticResource ButtonIcon_New_B}" Margin="0,4,4,0"/>
                <RadioButton Grid.Row="7" Grid.Column="1" IsChecked="{Binding IsBuildingAge0}" Command="{Binding ChangeBuildingStatsCommand}" CommandParameter="BuildingAge0" GroupName="BuildingAge" Content="Bestandsgebäude" Style="{StaticResource RadioButton01_A}" Tag="{StaticResource ButtonIcon_ExistingHouse_B}" Margin="4,4,0,0"/>
            </Grid>           
            
        </Grid>
    </Grid>
</UserControl>
