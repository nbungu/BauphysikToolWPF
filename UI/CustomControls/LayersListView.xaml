<UserControl x:Class="BauphysikToolWPF.UI.CustomControls.LayersListView"
             x:Name="LayersListViewControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ui="clr-namespace:BauphysikToolWPF.Services.UI"
             xmlns:customControls="clr-namespace:BauphysikToolWPF.UI.CustomControls"
             mc:Ignorable="d"
             d:DesignHeight="320"
             d:DesignWidth="640"
             d:Background="White">

    <UserControl.Resources>

        <ui:NumberConverter x:Key="NumberConverter" />

        <ControlTemplate x:Key="LayerListViewHeaderTemplate" TargetType="GridViewColumnHeader">
            <Grid>
                <Border
                    x:Name="HeaderBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{StaticResource PrimaryBorderBrush}"
                    BorderThickness="0,0,1,1"
                    Margin="0"
                    Padding="6"
                    Tag="{TemplateBinding Tag}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="16"/>
                            <RowDefinition Height="20" />
                        </Grid.RowDefinitions>

                        <ContentPresenter Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True"/>

                        <customControls:FractionLabel Grid.Row="1"
                                                      CounterText="{TemplateBinding Tag}"
                                                      VerticalAlignment="Center"
                                                      Foreground="{StaticResource PrimaryDarkMediumBrush}"
                                                      Margin="0,4,0,0"
                                                      FontWeight="DemiBold"
                                                      HorizontalAlignment="Left"/>
                    </Grid>
                </Border>
                <!-- ADD THIS PART: Resize Thumb -->
                <Thumb x:Name="PART_HeaderGripper"
                       Width="8"
                       HorizontalAlignment="Right">
                    <Thumb.Style>
                        <Style TargetType="Thumb">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Setter Property="Background" Value="Aqua"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Opacity" Value="0.0"/>
                            <Setter Property="Margin" Value="0,0,-4,0"/>
                            <Style.Triggers>
                                <!--weird workaround for being visible on all columns except the first one, which has ' ' as Tag-->
                                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource AncestorType=GridViewColumnHeader}}" Value=" ">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Thumb.Style>
                </Thumb>
            </Grid>
            <ControlTemplate.Triggers>

            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--
        https://learn.microsoft.com/en-us/dotnet/desktop/wpf/controls/gridview-overview?view=netframeworkdesktop-4.8
        https://github.com/mochan-b/GridViewCellFormatting
        Links the data content to a ListViewItem via Binding from ItemsSource, INSTEAD of ItemTemplate
        -->

        <GridView x:Key="LayerGridViewColumns" AllowsColumnReorder="true"> <!--ColumnHeaderContainerStyle="{StaticResource ListViewHeaderStyle01}"-->

            <!--Here: Binding source are Items (typeof 'Layer') from the ItemsSource Property-->
            <GridViewColumn Header="Pos." Width="36">
                <!--Custom Column Style for Column 0-->
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" Margin="-6,0,-6,0">
                            <Rectangle x:Name="rectangle" Fill="{Binding Material.ColorCode}" Width="8" VerticalAlignment="Stretch" HorizontalAlignment="Left" Margin="0,0,8,0"/>
                            <Label x:Name="positionLabel" Content="{Binding LayerNumber}" FontWeight="DemiBold" Margin="0"/>
                        </StackPanel>
                        <DataTemplate.Triggers>
                            <!-- Trigger to change label color when ListViewItem is selected -->
                            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True">
                                <Setter TargetName="positionLabel" Property="Foreground" Value="White"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
                <GridViewColumn.HeaderContainerStyle>
                    <Style TargetType="GridViewColumnHeader">
                        <Setter Property="Tag" Value=" "/>
                        <Setter Property="ToolTip" Value="Position der Schicht von innen (= 1) nach außen."/>
                        <Setter Property="Template" Value="{StaticResource LayerListViewHeaderTemplate}"/>
                        <Setter Property="Margin" Value="-2,0,0,0"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                    </Style>
                </GridViewColumn.HeaderContainerStyle>
            </GridViewColumn>

            <!-- NAME -->
            <GridViewColumn Header="Material" Width="200">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Material.Name}" Margin="0"/>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
                <GridViewColumn.HeaderContainerStyle>
                    <Style TargetType="GridViewColumnHeader">
                        <Setter Property="ToolTip" Value="Materialbezeichnung"/>
                        <Setter Property="Template" Value="{StaticResource LayerListViewHeaderTemplate}"/>
                    </Style>
                </GridViewColumn.HeaderContainerStyle>
            </GridViewColumn>
            
            <!-- DICKE -->
            <GridViewColumn Header="d" Width="64">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Thickness, Converter={StaticResource NumberConverter}}" FontWeight="DemiBold"/>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
                <GridViewColumn.HeaderContainerStyle>
                    <Style TargetType="GridViewColumnHeader">
                        <Setter Property="Tag" Value="cm"/>
                        <Setter Property="ToolTip" Value="Dicke"/>
                        <Setter Property="Template" Value="{StaticResource LayerListViewHeaderTemplate}"/>
                    </Style>
                </GridViewColumn.HeaderContainerStyle>
            </GridViewColumn>

            <!-- LEITFÄHIGKEIT -->
            <GridViewColumn Header="λ" Width="64">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Material.ThermalConductivity, Converter={StaticResource NumberConverter}, ConverterParameter=3}"/>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
                <GridViewColumn.HeaderContainerStyle>
                    <Style TargetType="GridViewColumnHeader">
                        <Setter Property="ToolTip" Value="Wärmeleitfähigkeit"/>
                        <Setter Property="Tag" Value="W/(mK)"/>
                        <Setter Property="Template" Value="{StaticResource LayerListViewHeaderTemplate}"/>
                    </Style>
                </GridViewColumn.HeaderContainerStyle>
            </GridViewColumn>

            <!-- R-WERT -->
            <GridViewColumn Header="R" Width="64">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding R_Value, Converter={StaticResource NumberConverter}}" FontWeight="DemiBold"/>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
                <GridViewColumn.HeaderContainerStyle>
                    <Style TargetType="GridViewColumnHeader">
                        <Setter Property="Tag" Value="m²K/W"/>
                        <Setter Property="ToolTip" Value="Wärmedurchlasswiderstand"/>
                        <Setter Property="Template" Value="{StaticResource LayerListViewHeaderTemplate}"/>
                    </Style>
                </GridViewColumn.HeaderContainerStyle>
            </GridViewColumn>

            <!-- DICHTE -->
            <GridViewColumn Header="ρ" Width="64">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Material.BulkDensity, Converter={StaticResource NumberConverter}}"/>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
                <GridViewColumn.HeaderContainerStyle>
                    <Style TargetType="GridViewColumnHeader">
                        <Setter Property="Tag" Value="kg/m³"/>
                        <Setter Property="ToolTip" Value="Rohdichte"/>
                        <Setter Property="Template" Value="{StaticResource LayerListViewHeaderTemplate}"/>
                    </Style>
                </GridViewColumn.HeaderContainerStyle>
            </GridViewColumn>

            <!-- FL.BEZ. MASSE -->
            <GridViewColumn Header="m'" Width="64">
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding AreaMassDensity, Converter={StaticResource NumberConverter}}"/>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
                <GridViewColumn.HeaderContainerStyle>
                    <Style TargetType="GridViewColumnHeader">
                        <Setter Property="Tag" Value="kg/m²"/>
                        <Setter Property="ToolTip" Value="flächenbezogene Masse"/>
                        <Setter Property="Template" Value="{StaticResource LayerListViewHeaderTemplate}"/>
                    </Style>
                </GridViewColumn.HeaderContainerStyle>
            </GridViewColumn>

        </GridView>

        <!-- Custom Layer ListViewItem appearance. Style of the Row Container -->
        <Style x:Key="LayerItemContainerStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <!--ToolTip uses ToString() of Layer-->
            <Setter Property="ToolTip" Value="{Binding}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="ListViewItemBorder"
                                BorderBrush="{StaticResource PrimaryBorderBrush}"
                                BorderThickness="0,0,0,1"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                Margin="{TemplateBinding Margin}"
                                CornerRadius="0"
                                Height="Auto"
                                SnapsToDevicePixels="true">
                            <Grid>
                                <StackPanel Orientation="Vertical">
                                    <!-- GridViewRowPresenter contains the actual ListViewItem Content from TemplateBinding (ItemsSource)-->
                                    <GridViewRowPresenter Content="{TemplateBinding Content}"
                                                          Columns="{TemplateBinding GridView.ColumnCollection}"
                                                          Margin="0"/>

                                    <!-- StackPanel for the Edit and Delete buttons -->
                                    <StackPanel x:Name="EditDeletePanel" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="Collapsed" Margin="4,0,0,0">
                                        <Label x:Name="LabelBalkenlage" Content="Balkenlage:" FontSize="12" Foreground="{StaticResource PrimaryBorderBrush}" Margin="36,0,0,0">
                                            <Label.Style>
                                                <Style TargetType="Label">
                                                    <Setter Property="Foreground" Value="{StaticResource PrimaryBorderBrush}"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding HasSubConstructions}" Value="True">
                                                            <Setter Property="Foreground" Value="Black"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Label.Style>
                                        </Label>
                                        <Button x:Name="InfoButtonBalkenlage" HorizontalAlignment="Left" Content="{Binding SubConstruction}" Style="{StaticResource ButtonStyleListViewItem}" Command="{Binding DataContext.EditSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding InternalId}"/>
                                        <Button x:Name="DeleteButtonBalkenlage" HorizontalAlignment="Left" Content="Entfernen" Style="{StaticResource ButtonStyleListViewItem}" Command="{Binding DataContext.DeleteSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding InternalId}" Margin="8,0,0,0"/>
                                    </StackPanel>

                                </StackPanel>

                                <!-- Add Layer SubConstruction -->
                                <Button x:Name="AddLayerSubConstructionButton"
                                    HorizontalAlignment="Right"
                                    Content="Balkenlage hinzufügen +"
                                    Style="{StaticResource ButtonStyleListViewItem}"
                                    Command="{Binding DataContext.AddSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ListView}}"
                                    CommandParameter="{Binding InternalId}"
                                    Margin="0,0,8,0"/>

                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- When a ListBox entry is Selected -->
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="ListViewItemBorder" Property="Background" Value="{StaticResource PrimaryHighlightBrush}"/>
                                <Setter Property="Foreground" Value="White"/>
                                <Setter TargetName="LabelBalkenlage" Property="Foreground" Value="White"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding HasSubConstructions}" Value="True">
                                <Setter TargetName="EditDeletePanel" Property="Visibility" Value="Visible" />
                                <Setter TargetName="AddLayerSubConstructionButton" Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding HasSubConstructions}" Value="False">
                                <Setter TargetName="EditDeletePanel" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="AddLayerSubConstructionButton" Property="Visibility" Value="Visible" />
                            </DataTrigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource PrimaryHoverBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>

    <Grid>

        <!-- ItemsSource gets updated by backend -->
        <!-- This is 'PlacementTarget' as seen from ContextMenu -->
        <ListView x:Name="LayersListViewElement"
            ItemsSource="{Binding Layers, ElementName=LayersListViewControl}"
            SelectedItem="{Binding SelectedLayer, ElementName=LayersListViewControl}"
            View="{StaticResource LayerGridViewColumns}"
            Style="{StaticResource ListViewStyle01}"
            ItemContainerStyle="{StaticResource LayerItemContainerStyle}"
            Tag="{Binding}">
            <!-- EventToCommand behavior to bind the double-click event to the command-->
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                    <i:InvokeCommandAction Command="{Binding LayerDoubleClickCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <!--ItemContainerStyle: Defines the style and behavior of the ListViewItem container itself. This can include properties like margins, padding, selection styles, and triggers based on the ListViewItem state.-->
            <!--ItemTemplate: Defines how the CONTENT of each ListViewItem is displayed. It specifies the visual structure and data bindings for the item content.-->

            <ListView.ContextMenu>
                <ContextMenu>
                    <!-- ContextMenu isn't a part of the visual tree of this page -> DataContext is not available.
                    Need to pass the data context in a different way, using PlacementTarget and the Tag property to expose the DataBinding (FO1_ViewModel).
                    The Tag Property can be used to hold any kind of user specified Data.-->
                    <MenuItem Command="{Binding Path=PlacementTarget.Tag.EditLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header" Value="Bearbeiten" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PlacementTarget.Tag.IsLayerSelected, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                        <MenuItem.Icon>
                            <Image Source="{StaticResource ButtonIcon_Edit_B}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Command="{Binding Path=PlacementTarget.Tag.AddLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header" Value="Schicht hinzufügen" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PlacementTarget.Tag.IsLayerSelected, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                        <MenuItem.Icon>
                            <Image Source="{StaticResource ButtonIcon_Add_B}"/>
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem Command="{Binding Path=PlacementTarget.Tag.DuplicateLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header" Value="Duplizieren" />
                                <Setter Property="Visibility" Value="Visible" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PlacementTarget.Tag.IsLayerSelected, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                        <MenuItem.Icon>
                            <Image Source="{StaticResource ButtonIcon_Copy_B}"/>
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header" Value="Löschen" />
                                <Setter Property="Visibility" Value="Visible" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PlacementTarget.Tag.IsLayerSelected, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                        <MenuItem.Icon>
                            <Image Source="{StaticResource ButtonIcon_Delete_B}"/>
                        </MenuItem.Icon>
                    </MenuItem>

                    <Separator Margin="-30,4,0,4" Padding="0" HorizontalAlignment="Stretch" BorderThickness="0.6" BorderBrush="{StaticResource PrimaryBorderBrush}"/>

                    <MenuItem Command="{Binding Path=PlacementTarget.Tag.AddSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.SelectedItem.InternalId, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header" Value="Balkenlage hinzufügen" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PlacementTarget.SelectedItem.HasSubConstructions, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                        <MenuItem.Icon>
                            <Image Source="{StaticResource ButtonIcon_Add_B}"/>
                        </MenuItem.Icon>
                    </MenuItem>


                    <MenuItem Command="{Binding Path=PlacementTarget.Tag.EditSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.SelectedItem.InternalId, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header" Value="Balkenlage bearbeiten" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PlacementTarget.SelectedItem.HasSubConstructions, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                        <MenuItem.Icon>
                            <Image Source="{StaticResource ButtonIcon_Edit_B}"/>
                        </MenuItem.Icon>
                    </MenuItem>

                    <MenuItem Command="{Binding Path=PlacementTarget.Tag.DeleteSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.SelectedItem.InternalId, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                        <MenuItem.Style>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="Header" Value="Balkenlage löschen" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=PlacementTarget.SelectedItem.HasSubConstructions, RelativeSource={RelativeSource AncestorType=ContextMenu}}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                        <MenuItem.Icon>
                            <Image Source="{StaticResource ButtonIcon_Delete_B}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </ContextMenu>
            </ListView.ContextMenu>
        </ListView>


    </Grid>

</UserControl>
