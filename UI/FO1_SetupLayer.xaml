<UserControl x:Class="BauphysikToolWPF.UI.FO1_SetupLayer"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
            xmlns:local="clr-namespace:BauphysikToolWPF"
            xmlns:controls="clr-namespace:BauphysikToolWPF.UI.CustomControls"
            xmlns:vm="clr-namespace:BauphysikToolWPF.UI.ViewModels"
            mc:Ignorable="d"
            d:DesignHeight="700"
            d:DesignWidth="1200"
            IsVisibleChanged="UserControl_IsVisibleChanged">

    <UserControl.DataContext>
        <!-- Sets the Data Reference (Source) for 'Binding' in this XAML -->
        <vm:FO1_LayerViewModel/>
    </UserControl.DataContext>
    
    <!--
    the DataContext is used to specify the data source for a UI element,
    while the ItemsSource is used to specify the data source for a list of items.
    Both can be used for binding to display and modify data in the UI.
    -->

    <UserControl.Resources>
        <!--
        Defines a Template for the Items in the LayerListView.
        The Bindings are retrieved from the ItemsSource which is set by the backend.
        -->
        <controls:ItemSelectedToEnabledConverter x:Key="ItemSelectedToEnabledConverter"/>

        <!-- New partial style of ButtonStyleListViewItem that includes the DataTrigger -->
        <Style x:Key="EditButtonBalkenlageVisibilityStyle" TargetType="Button" BasedOn="{StaticResource ButtonStyleListViewItem}">
            <Setter Property="Visibility" Value="Collapsed"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding HasSubConstruction}" Value="True">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="AddButtonBalkenlageVisibilityStyle" TargetType="Button" BasedOn="{StaticResource ButtonStyleListViewItem}">
            <Setter Property="Visibility" Value="Visible"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding HasSubConstruction}" Value="True">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Defines the type of UIElement used in the ItemsPanel-->
        <ItemsPanelTemplate x:Key="Canvas">
            <!--Takes the Width and Height from TemplatedParent-->
            <Canvas Width="Auto" Height="Auto" SnapsToDevicePixels="True"/>
        </ItemsPanelTemplate>

        <!-- Properties of a CanvasItem (Layer). Sets the Drawing Coordinates of the container holding a CanvasItem -->
        <Style x:Key="CanvasContainerStyle" TargetType="ContentPresenter">
            <Setter Property="Canvas.Left" Value="{Binding Rectangle.Left}"/>
            <Setter Property="Canvas.Top" Value="{Binding Rectangle.Top}"/>
        </Style>

        <!-- Content and Styling of a Canvas Item (Layer) -->
        <DataTemplate x:Key="CanvasLayerItemStyle">
            <Grid Width="{Binding Rectangle.Width}"
                  Height="{Binding Rectangle.Height}"
                  Background="{Binding BackgroundColor}"
                  Opacity="{Binding Opacity}">
                <Rectangle x:Name="LayerRectangle"
                           Fill="{Binding DrawingBrush}"
                           Stroke="{Binding RectangleBorderColor}"
                           StrokeThickness="{Binding RectangleBorderThickness}"/>
                <Ellipse Fill="White"
                         Width="20"
                         Height="20"
                         Stroke="{Binding RectangleBorderColor}"
                         StrokeThickness="1"
                         HorizontalAlignment="Center"
                         Margin="-8"/>
                <Label Content="{Binding Tag}" Margin="-8"/>
            </Grid>
        </DataTemplate>

        <!-- Content and Styling of a Canvas Item (Measurement Marker Line) -->
        <DataTemplate x:Key="MeasurementItemStyle">
            <Grid Width="{Binding Rectangle.Width}"
                  Height="{Binding Rectangle.Height}">
                <Rectangle x:Name="MeasurementDrawing" Fill="{Binding DrawingBrush}"/>
            </Grid>
        </DataTemplate>

        <!--
        https://learn.microsoft.com/en-us/dotnet/desktop/wpf/controls/gridview-overview?view=netframeworkdesktop-4.8
        https://github.com/mochan-b/GridViewCellFormatting
        Links the data content to a ListViewItem via Binding from ItemsSource, INSTEAD of ItemTemplate
        -->
        <GridView x:Key="LayerGridViewColumns" AllowsColumnReorder="true" ColumnHeaderContainerStyle="{StaticResource ListViewHeaderStyle01}">
            <!--Here: Binding source are Items (typeof 'Layer') from the ItemsSource Property-->
            <GridViewColumn Header="Pos." Width="Auto">
                <!--Custom Column Style for Column 0-->
                <GridViewColumn.CellTemplate>
                    <DataTemplate>
                        <Grid>
                            <Ellipse Fill="{Binding Material.ColorCode}" Height="28" Width="28" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <Label Content="{Binding LayerPosition}" Foreground="White" FontWeight="Bold"/>
                        </Grid>
                    </DataTemplate>
                </GridViewColumn.CellTemplate>
            </GridViewColumn>
            <GridViewColumn DisplayMemberBinding="{Binding Material.Name}" Header="Material" Width="Auto"/>
            <GridViewColumn DisplayMemberBinding="{Binding Width}" Header="d [cm]" Width="Auto"/>
            <GridViewColumn DisplayMemberBinding="{Binding Material.ThermalConductivity}" Header="λ [W/(mK)]" Width="Auto"/>
            <GridViewColumn DisplayMemberBinding="{Binding Material.BulkDensity}" Header="ρ [kg/m³]" Width="Auto"/>
            <GridViewColumn DisplayMemberBinding="{Binding R_Value}" Header="R [m²K/W]" Width="Auto"/>
            <GridViewColumn DisplayMemberBinding="{Binding Sd_Thickness}" Header="sd [m]" Width="Auto"/>
            <GridViewColumn DisplayMemberBinding="{Binding AreaMassDensity}" Header="m' [kg/m²]" Width="Auto"/>
            <GridViewColumn DisplayMemberBinding="{Binding IsEffective}" Header="Wirksam" Width="Auto"/>
        </GridView>
        
        <!-- Custom Layer ListViewItem appearance. Style of the Row Container -->
        <Style x:Key="LayerItemContainerStyle" TargetType="{x:Type ListViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <!--ToolTip uses ToString() of Layer-->
            <Setter Property="ToolTip" Value="{Binding}"/>
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Margin" Value="0,0,0,0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                        <Border x:Name="ListViewItemBorder"
                                BorderBrush="{StaticResource PrimaryBorderBrush}"
                                BorderThickness="0,0,0,1"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="0"
                                Height="56"
                                SnapsToDevicePixels="true">
                            <StackPanel Orientation="Vertical">
                                <!--GridViewRowPresenter contains the actual ListViewItem Content from TemplateBinding (ItemsSource)-->
                                <GridViewRowPresenter Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}"/>
                                <!-- TODO: Balken Lage INFOS hier...-->
                                <StackPanel Orientation="Horizontal" Margin="48,0,0,0" Background="Transparent">
                                    <Label Name="LabelBalkenlage" Content="Balkenlage: " FontSize="12" Padding="0,0,4,1">
                                        <Label.Style>
                                            <Style TargetType="Label">
                                                <Setter Property="Foreground" Value="{StaticResource PrimaryBorderBrush}"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding HasSubConstruction}" Value="True">
                                                        <Setter Property="Foreground" Value="Black"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <Button x:Name="AddButtonBalkenlage" HorizontalAlignment="Left" Content="Hinzufügen +" Style="{StaticResource AddButtonBalkenlageVisibilityStyle}" Command="{Binding DataContext.AddSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding InternalId}"/>
                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                                        <Button x:Name="InfoButtonBalkenlage" HorizontalAlignment="Left" Content="{Binding SubConstruction}" Style="{StaticResource EditButtonBalkenlageVisibilityStyle}" Command="{Binding DataContext.AddSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding InternalId}"/>
                                        <Button x:Name="DeleteButtonBalkenlage" HorizontalAlignment="Left" Content="Entfernen" Style="{StaticResource EditButtonBalkenlageVisibilityStyle}" Command="{Binding DataContext.DeleteSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding InternalId}" Margin="8,0,0,0"/>
                                    </StackPanel>
                                    
                                </StackPanel>
                                
                            </StackPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--When a ListBox entry is Selected-->
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="ListViewItemBorder" Property="Background" Value="{StaticResource PrimaryHighlightBrush}"/>
                                <Setter TargetName="LabelBalkenlage" Property="Foreground" Value="White"/>
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource PrimaryHoverBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>        
        
    </UserControl.Resources>

    <!--Main Grid: 2x2-->
    <Grid Background="{StaticResource PrimaryLightBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="56"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!--Top -->
        <Border Grid.ColumnSpan="2" Margin="16,16,16,0" CornerRadius="8" Background="{StaticResource PrimaryMediumBrush}">
            <Grid>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Button Style="{StaticResource ButtonStyle03_IconMini}" Command="{Binding SwitchPageCommand}" CommandParameter="{x:Static local:NavigationContent.LandingPage}" Tag="{StaticResource ButtonIcon_Prev_B}" Margin="4" ToolTip="Zurück zu: Bauteilübersicht"/>
                    <Label Content="Zurück"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <Ellipse Fill="{Binding SelectedElement.ColorCode}" Width="20" Height="20" Margin="0,0,8,0"/>
                    <Label Content="{Binding SelectedElement.Name}" FontSize="18" FontWeight="Bold" FontStretch="Expanded"/>
                    <Label Content="{Binding SelectedElement.Construction.TypeName}" ContentStringFormat="({0})" FontSize="18" FontStyle="Italic" Margin="0,0,8,0"/>
                    <Button Style="{StaticResource ButtonStyle03_IconMini}" Command="{Binding EditElementCommand}" Tag="{StaticResource ButtonIcon_Edit_B}" Margin="4"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <Label Content="Weiter"/>
                    <Button Style="{StaticResource ButtonStyle03_IconMini}" Command="{Binding SwitchPageCommand}" CommandParameter="{x:Static local:NavigationContent.SetupEnv}" Tag="{StaticResource ButtonIcon_Next_B}" Margin="4" ToolTip="Weiter zu: Umgebungsbedingungen"/>
                </StackPanel>
            </Grid>
        </Border>
        
        <!--Content Area-->
        <Grid Grid.Row="1" Margin="0">
            <Grid.RowDefinitions>
                <RowDefinition Height=".6*"/>
                <RowDefinition Height=".4*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width=".8*" MinWidth="320"/>
                <ColumnDefinition Width=".2*" MinWidth="160"/>
            </Grid.ColumnDefinitions>

            <!--LayerList-->
            <Grid Grid.Row="0" Grid.Column="0" Margin="16">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <StackPanel Grid.Row="0" Orientation="Horizontal">
                    <Button Content="Hinzufügen" Style="{StaticResource ButtonStyle03_A}" Command="{Binding AddLayerCommand}" Tag="{StaticResource ButtonIcon_AddLayer_W}" Margin="0,0,8,0"/>
                    <Button Style="{StaticResource ButtonStyle03_B_Icon}" Command="{Binding EditLayerCommand}" CommandParameter="{Binding SelectedItem.InternalId, ElementName=LayersListView}" Tag="{StaticResource ButtonIcon_Edit_B}" Margin="0,0,8,0" IsEnabled="{Binding ElementName=LayersListView, Path=SelectedItem, Converter={StaticResource ItemSelectedToEnabledConverter}}"/>
                    <Button Style="{StaticResource ButtonStyle03_B_Icon}" Command="{Binding DuplicateLayerCommand}" CommandParameter="{Binding SelectedItem.InternalId, ElementName=LayersListView}" Tag="{StaticResource ButtonIcon_Copy_B}"  Margin="0,0,8,0" IsEnabled="{Binding ElementName=LayersListView, Path=SelectedItem, Converter={StaticResource ItemSelectedToEnabledConverter}}" ToolTip="Kopieren"/>
                    <Button Style="{StaticResource ButtonStyle03_B_Icon}" Command="{Binding MoveLayerUpCommand}" CommandParameter="{Binding SelectedItem.InternalId, ElementName=LayersListView}" Tag="{StaticResource ButtonIcon_Up_B}" Margin="0,0,8,0" IsEnabled="{Binding ElementName=LayersListView, Path=SelectedItem, Converter={StaticResource ItemSelectedToEnabledConverter}}"/>
                    <Button Style="{StaticResource ButtonStyle03_B_Icon}" Command="{Binding MoveLayerDownCommand}" CommandParameter="{Binding SelectedItem.InternalId, ElementName=LayersListView}" Tag="{StaticResource ButtonIcon_Down_B}" Margin="0,0,8,0" IsEnabled="{Binding ElementName=LayersListView, Path=SelectedItem, Converter={StaticResource ItemSelectedToEnabledConverter}}"/>
                    <Button Style="{StaticResource ButtonStyle03_B_Icon}" Command="{Binding DeleteLayerCommand}" CommandParameter="{Binding SelectedItem.InternalId, ElementName=LayersListView}" Tag="{StaticResource ButtonIcon_Delete_B}" Margin="0,0,8,0" IsEnabled="{Binding ElementName=LayersListView, Path=SelectedItem, Converter={StaticResource ItemSelectedToEnabledConverter}}"/>
                </StackPanel>

                <Label Grid.Row="1" Content="Von innen nach außen:" HorizontalAlignment="Left" VerticalAlignment="Top" FontWeight="Bold" Margin="0,8,0,0"/>

                <!-- ItemsSource gets updated by backend -->
                <!-- This is 'PlacementTarget' as seen from ContextMenu -->
                <ListView x:Name="LayersListView"
                      Grid.Row="2"
                      ItemsSource="{Binding LayerList}" 
                      View="{StaticResource LayerGridViewColumns}"
                      Style="{StaticResource ListViewStyle01}"
                      ItemContainerStyle="{StaticResource LayerItemContainerStyle}"
                      SelectedIndex="{Binding SelectedLayerIndex}"                 
                      Tag="{Binding}">
                    <!--TODO Add Style-->
                    <ListView.ContextMenu>
                        <ContextMenu>
                            <!-- ContextMenu isn't a part of the visual tree of this page -> DataContext is not available.
                        Need to pass the data context in a different way, using PlacementTarget and the Tag property to expose the DataBinding (FO1_ViewModel).
                        The Tag Property can be used to hold any kind of user specified Data.-->
                            <MenuItem Header="Bearbeiten" Command="{Binding Path=PlacementTarget.Tag.EditLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.SelectedItem.InternalId, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource ButtonIcon_Edit_B}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Duplizieren" Command="{Binding Path=PlacementTarget.Tag.DuplicateLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.SelectedItem.InternalId, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource ButtonIcon_Copy_B}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Balkenlage hinzufügen" Command="{Binding Path=PlacementTarget.Tag.AddSubConstructionLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.SelectedItem.InternalId, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource ButtonIcon_Copy_B}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Löschen" Command="{Binding Path=PlacementTarget.Tag.DeleteLayerCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}" CommandParameter="{Binding Path=PlacementTarget.SelectedItem.InternalId, RelativeSource={RelativeSource AncestorType=ContextMenu}}">
                                <MenuItem.Icon>
                                    <Image Source="{StaticResource ButtonIcon_Delete_B}"/>
                                </MenuItem.Icon>
                            </MenuItem>
                        </ContextMenu>
                    </ListView.ContextMenu>
                </ListView>
            </Grid>

            <!-- GridSplitter - Horizontal
            <GridSplitter Grid.Row="1" Grid.Column="0" Height="6" HorizontalAlignment="Stretch" VerticalAlignment="Top" Style="{StaticResource GridSplitterStyle}" />
            -->

            <!--Image-->
            <Grid Grid.Column="0" Grid.Row="1" Margin="16">
                <!-- Elements inside of ViewBox are dynamically sizable-->
                <Viewbox VerticalAlignment="Center" HorizontalAlignment="Center">
                    <!--Style for Rotation Style="{StaticResource ViewBoxStyle}"-->
                    <!--Keep this Margin to avoid clipping of LayerPosition circles and width measurement numbers!-->
                    <Grid Margin="8">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <!-- "Element Canvas" -->
                        <ItemsControl x:Name="ElementCanvas"
                            Grid.Row="0"
                            Grid.Column="0"
                            Width="880"
                            Height="400"                                  
                            ItemsSource="{Binding DrawingGeometries}"
                            ItemsPanel="{StaticResource Canvas}"
                            ItemContainerStyle="{StaticResource CanvasContainerStyle}"
                            ItemTemplate="{StaticResource CanvasLayerItemStyle}"/>

                        <!-- "Horizontal Measurement Grid" -->
                        <ItemsControl x:Name="MeasurementGrid"
                            Grid.Row="0"
                            Grid.Column="1"
                            Height="{Binding ElementName=ElementCanvas, Path=Height}"
                            ItemsSource="{Binding MeasurementChain}"
                            ItemsPanel="{StaticResource Canvas}"
                            ItemContainerStyle="{StaticResource CanvasContainerStyle}"
                            ItemTemplate="{StaticResource MeasurementItemStyle}"
                            Margin="16,0,16,0"/>

                        <!-- "Horizontal Measurement Grid Full" -->
                        <ItemsControl x:Name="MeasurementGridFull"
                              Grid.Row="0"
                              Grid.Column="2"
                              Height="{Binding ElementName=ElementCanvas, Path=Height}"
                              ItemsSource="{Binding MeasurementChainFull}"
                              ItemsPanel="{StaticResource Canvas}"
                              ItemContainerStyle="{StaticResource CanvasContainerStyle}"
                              ItemTemplate="{StaticResource MeasurementItemStyle}"
                              Margin="16,0,16,0"/>
                    </Grid>
                </Viewbox>
            </Grid>

            <!--Grid Splitter-->
            <GridSplitter Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" HorizontalAlignment="Left" VerticalAlignment="Stretch" Width="6" Style="{StaticResource GridSplitterStyleDotted}" Margin="0,16,0,16"/>

            <DataGrid Grid.Row="0" Grid.Column="1" Name="PropertiesDataGrid"
                Margin="16"
                ItemsSource="{Binding Properties}"
                Style="{StaticResource DataGridStyle}"
                RowStyle="{StaticResource DataGridRowStyle}"
                CellStyle="{StaticResource DataGridCellStyle}"
                ColumnHeaderStyle="{StaticResource DataGridColumnHeaderStyle}">

                <DataGrid.Columns>
                    <!-- Left Column -->
                    <DataGridTemplateColumn Width=".4*" IsReadOnly="True" MinWidth="80">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Label Content="{Binding PropertyName}" FontSize="12" HorizontalAlignment="Left" VerticalAlignment="Stretch"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <!-- Right Column with DataTemplate -->
                    <DataGridTemplateColumn Width=".6*" IsReadOnly="False"  MinWidth="120">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ContentControl Content="{Binding}">
                                    <ContentControl.ContentTemplateSelector>
                                        <controls:PropertyValueTemplateSelector>
                                            <controls:PropertyValueTemplateSelector.TextBoxTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding PropertyValue}" Style="{StaticResource DataGridTextBox}"/>
                                                </DataTemplate>
                                            </controls:PropertyValueTemplateSelector.TextBoxTemplate>
                                            <controls:PropertyValueTemplateSelector.ComboBoxTemplate>
                                                <DataTemplate>
                                                    <ComboBox IsEditable="True" SelectedValue="{Binding PropertyValue}"
                                      ItemsSource="{Binding PropertyValues}"
                                      Style="{StaticResource DataGridComboBox}"/>
                                                </DataTemplate>
                                            </controls:PropertyValueTemplateSelector.ComboBoxTemplate>
                                        </controls:PropertyValueTemplateSelector>
                                    </ContentControl.ContentTemplateSelector>
                                </ContentControl>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>

        </Grid>

        

        
    </Grid>

</UserControl>
