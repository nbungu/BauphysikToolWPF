<Window x:Class="BauphysikToolWPF.UI.EditElementWindow"
        x:Name="Window"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:BauphysikToolWPF.UI.ViewModels"
        xmlns:local="clr-namespace:BauphysikToolWPF"
        mc:Ignorable="d"
        Title="Bauteildaten festlegen"
        Height="Auto"
        Width="320"
        WindowStartupLocation="CenterScreen"
        
        ShowInTaskbar="False"
        WindowStyle="ToolWindow">

    <Window.DataContext>
        <!-- Sets the Data Reference (Source) for 'Binding' in this XAML -->
        <vm:EditElementWindow_VM/>
    </Window.DataContext>

    <Window.Resources>

        <ItemsPanelTemplate x:Key="WrapPanel_Template">
            <WrapPanel x:Name="element_WrapPanel" ItemWidth="Auto" ItemHeight="Auto" ClipToBounds="True"/>
        </ItemsPanelTemplate>

        <!--Here: Binding (DataContext) is typeof 'Tag_List' set by ItemsSource Property-->
        <DataTemplate x:Key="WrapPanelItem_DesignTemplate">
            <Grid Margin="4">
                <!--
                'RemoveTagCommand' is not in DataContext of this UIElement (Binding here is typeof 'Element' from ItemsSource Property).
                Switch to correct DataContext. Using the 'Tag' Property as holder of our other DataContext. Tag is set by the ItemsControl.
                -->
                <Button Tag="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                        Content="{Binding}"
                        Command="{Binding RelativeSource={RelativeSource Self}, Path=Tag.RemoveTagCommand}"
                        CommandParameter="{Binding}"
                        Style="{StaticResource ButtonStyle05_Tag}">
                </Button>                
            </Grid>
        </DataTemplate>
    </Window.Resources>

    <StackPanel Margin="16">
        <StackPanel Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Name" HorizontalAlignment="Left"/>
            <TextBox Text="{Binding SelectedElementName}" HorizontalContentAlignment="Left" MaxLength="64" Height="32" HorizontalAlignment="Stretch"/>
        </StackPanel>
        <StackPanel Grid.Row="1" Orientation="Vertical"  Margin="0,0,0,8">
            <Label Content="Typ" HorizontalAlignment="Left"/>
            <ComboBox ItemsSource="{Binding ConstructionType_List}" SelectedItem="{Binding SelectedConstruction}"/>
        </StackPanel>
        <StackPanel Grid.Row="2" Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Ausrichtung" HorizontalAlignment="Left"/>
            <ComboBox ItemsSource="{Binding Orientation_List}" SelectedItem="{Binding SelectedOrientation}"/>
        </StackPanel>
        <StackPanel Grid.Row="3" Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Farbe" HorizontalAlignment="Left"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width=".25*"/>
                    <ColumnDefinition Width=".25*"/>
                    <ColumnDefinition Width=".25*"/>
                    <ColumnDefinition Width=".25*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height=".5*"/>
                    <RowDefinition Height=".5*"/>
                </Grid.RowDefinitions>

                <RadioButton GroupName="Colors" Width="24" Height="24"/>
                <RadioButton Grid.Column="1" GroupName="Colors" Width="24" Height="24"/>
            </Grid>
        </StackPanel>
        <StackPanel Grid.Row="4" Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Eigene Gruppierung" HorizontalAlignment="Left"/>
            <Grid Margin="0,0,0,8">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Button Grid.ColumnSpan="2" Visibility="{Binding TagBtnVisible}" Style="{StaticResource ButtonStyle03_B_Transparent}" Tag="{StaticResource ButtonIcon_Add_B}" Content="Neues Tag hinzufügen" Command="{Binding ToggleInputCommand}" Height="32" FontWeight="Regular"/>
                <TextBox x:Name="TagInputField" Visibility="{Binding TextBoxVisible}" HorizontalContentAlignment="Left" MaxLength="48" Height="32"/>
                <Button Visibility="{Binding EnterBtnVisible}" Grid.Column="1" Style="{StaticResource ButtonStyle03_Mini}" Tag="{StaticResource ButtonIcon_Add_B}" Command="{Binding EnterTagCommand}" CommandParameter="{Binding Text, ElementName=TagInputField}" Height="32" Width="32" Margin="8,0,0,0"/>
            </Grid>
            <!--"WrapPanel inside a ListBox does pick up the DataTemplate you define .. so you have complete liberty to bind any list to your WrapPanel"-->
            <ItemsControl ItemsSource="{Binding Tag_List}"
                          ItemsPanel="{StaticResource WrapPanel_Template}"
                          ItemTemplate="{StaticResource WrapPanelItem_DesignTemplate}"
                          Background="Transparent"                          
                          BorderThickness="0"
                          Tag="{Binding}"/>
        </StackPanel>
        <Button Grid.Row="5" Margin="0,8,0,0" Content="Übernehmen" Command="{Binding ApplyChangesCommand}" CommandParameter="{Binding ElementName=Window}" Style="{StaticResource ButtonStyle02_A}"/>
    </StackPanel>


</Window>
