<Window x:Class="BauphysikToolWPF.UI.EditElementWindow"
        x:Name="Window"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:BauphysikToolWPF.UI.ViewModels"
        xmlns:local="clr-namespace:BauphysikToolWPF"
        xmlns:sys="clr-namespace:System;assembly=System.Runtime"
        xmlns:models="clr-namespace:BauphysikToolWPF.Models"
        mc:Ignorable="d"
        Title="Bauteildaten festlegen"
        ResizeMode="CanResizeWithGrip"
        Width="320"
        MinWidth="220"
        MaxWidth="480"
        MinHeight="80"
        WindowStartupLocation="CenterOwner"        
        ShowInTaskbar="False"
        WindowStyle="ToolWindow"
        SizeToContent="Height">

    <Window.DataContext>
        <!-- Sets the Data Reference (Source) for 'Binding' in this XAML -->
        <vm:EditElementWindow_VM/>
    </Window.DataContext>

    <Window.Resources>

        <!--populate the items of a ComboBox with all elements from an enum-->
        <ObjectDataProvider MethodName="GetValues" ObjectType="{x:Type sys:Enum}" x:Key="OrientationTypeValues">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="models:OrientationType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <Style x:Key="ItemsControlVisibilityStyle" TargetType="ItemsControl">
            <Style.Triggers>
                <DataTrigger Binding="{Binding TagList.Count}" Value="0">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!--Custom RadioButton_ColorPicker: with icon center top, rounded corners, transparent, click effects-->
        <Style x:Key="RadioButton_ColorPicker" TargetType="{x:Type RadioButton}">
            <!--Set default properties of the button-->
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="BorderBrush" Value="{StaticResource PrimaryHighlightBrush}"/>
            <Setter Property="Background" Value="Red"/>
            <Setter Property="Tag" Value="{x:Null}"/>
            <!--Use 'Tag' as Icon Source-->
            <Setter Property="Height" Value="32"/>
            <Setter Property="Width" Value="32"/>
            <!--Set appearance of the element-->
            <Setter Property="Template">
                <Setter.Value>
                    <!--Element appearance with behaviour of a 'RadioButton'-->
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid>
                            <Border Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" CornerRadius="16" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <Ellipse Width="24" Height="24" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{TemplateBinding Background}"/>
                            <Image Source="{TemplateBinding Tag}" Width="24" Height="24" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <!--Set Triggers and Effects-->
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="False">
                    <Setter Property="BorderBrush" Value="Transparent"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource PrimaryHoverBrush}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                        <Condition Property="IsChecked" Value="True" />
                    </MultiTrigger.Conditions>
                    <MultiTrigger.Setters>
                        <Setter Property="BorderBrush" Value="{StaticResource PrimaryHighlightBrush}" />
                    </MultiTrigger.Setters>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <ItemsPanelTemplate x:Key="WrapPanel_Template">
            <WrapPanel ItemWidth="Auto" ItemHeight="Auto" SnapsToDevicePixels="True"/>
        </ItemsPanelTemplate>

        <!--Here: Binding (DataContext) is typeof 'TagList' set by ItemsSource Property-->
        <DataTemplate x:Key="WrapPanelItem_DesignTemplate">
            <Grid Margin="4">
                <!-- 'RemoveTagCommand' is not in DataContext of this UIElement (Binding here is typeof 'Element' from ItemsSource Property).
                Switch to correct DataContext. Using the 'Tag' Property as holder of our other DataContext. Tag is set by the ItemsControl.-->
                <Button Tag="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                        Content="{Binding}"
                        Command="{Binding RelativeSource={RelativeSource Self}, Path=Tag.RemoveTagCommand}"
                        CommandParameter="{Binding}"
                        Style="{StaticResource ButtonStyle05_Tag}">
                </Button>
            </Grid>
        </DataTemplate>

    </Window.Resources>

    <StackPanel Margin="16">
        <StackPanel Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Name" HorizontalAlignment="Left"/>
            <TextBox Text="{Binding SelectedElementName}" HorizontalContentAlignment="Left" MaxLength="64" Height="32" HorizontalAlignment="Stretch"/>
        </StackPanel>
        <StackPanel Orientation="Vertical"  Margin="0,0,0,8">
            <Label Content="Typ" HorizontalAlignment="Left"/>
            <ComboBox ItemsSource="{Binding ConstructionType_List}" SelectedItem="{Binding SelectedConstruction}"/>
        </StackPanel>
        <StackPanel Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Ausrichtung" HorizontalAlignment="Left"/>
            <ComboBox ItemsSource="{Binding Source={StaticResource OrientationTypeValues}}" SelectedItem="{Binding SelectedOrientation}"/>
        </StackPanel>
        <StackPanel Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Farbe" HorizontalAlignment="Left"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width=".25*"/>
                    <ColumnDefinition Width=".25*"/>
                    <ColumnDefinition Width=".25*"/>
                    <ColumnDefinition Width=".25*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height=".5*"/>
                    <RowDefinition Height=".5*"/>
                </Grid.RowDefinitions>
                <RadioButton GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Black" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <RadioButton Grid.Row="0" Grid.Column="1" GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Gray" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <RadioButton Grid.Row="0" Grid.Column="2" GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Red" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <RadioButton Grid.Row="0" Grid.Column="3" GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Green" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <RadioButton Grid.Row="1" Grid.Column="0" GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Blue" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <RadioButton Grid.Row="1" Grid.Column="1" GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Yellow" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <RadioButton Grid.Row="1" Grid.Column="2" GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Brown" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
                <RadioButton Grid.Row="1" Grid.Column="3" GroupName="Colors" Style="{StaticResource RadioButton_ColorPicker}" Background="Transparent" Tag="{StaticResource ButtonIcon_Cancel_B}" Margin="4" Command="{Binding ChangeColorCommand}" CommandParameter="{Binding Background, RelativeSource={RelativeSource Self}}"/>
            </Grid>
        </StackPanel>

        <StackPanel Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Eigene Gruppierung" HorizontalAlignment="Left"/>
            <Grid Margin="0,0,0,8">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Button Grid.ColumnSpan="2" Visibility="{Binding TagBtnVisible}" Style="{StaticResource ButtonStyle03_B_Transparent}" Tag="{StaticResource ButtonIcon_Add_B}" Content="Neues Tag hinzufügen" Command="{Binding ToggleTagInputCommand}" Height="32" FontWeight="Regular"/>
                <TextBox Grid.Column="0" x:Name="TagInputField" Visibility="{Binding TextBoxVisible}" HorizontalContentAlignment="Left" MaxLength="48" Height="32"/>
                <Button Visibility="{Binding EnterBtnVisible}" Grid.Column="1" Style="{StaticResource ButtonStyle03_Mini}" Tag="{StaticResource ButtonIcon_Add_B}" Command="{Binding EnterTagCommand}" CommandParameter="{Binding Text, ElementName=TagInputField}" Height="32" Width="32" Margin="8,0,0,0"/>
            </Grid>
            <ItemsControl ItemsSource="{Binding TagList}"
                          ItemsPanel="{StaticResource WrapPanel_Template}"
                          ItemTemplate="{StaticResource WrapPanelItem_DesignTemplate}"
                          Background="Transparent"                          
                          BorderThickness="0"
                          Tag="{Binding}"
                          Style="{StaticResource ItemsControlVisibilityStyle}"/>
        </StackPanel>

        <StackPanel Orientation="Vertical" Margin="0,0,0,8">
            <Label Content="Kommentar" HorizontalAlignment="Left"/>
            <TextBox TextAlignment="Left" Text="{Binding SelectedElementComment}" Background="{StaticResource PrimaryLightBrush}" VerticalContentAlignment="Top" TextWrapping="Wrap" MinHeight="80" FontSize="14" FontFamily="Consolas" MaxLength="800"/>
        </StackPanel>

        <Button Margin="0,8,0,0" Content="Übernehmen" Command="{Binding ApplyChangesCommand}" CommandParameter="{Binding ElementName=Window}" Style="{StaticResource ButtonStyle02_A}"/>

    </StackPanel>
</Window>
